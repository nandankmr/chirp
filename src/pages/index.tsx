import { SignInButton, useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import RelativeTime from "dayjs/plugin/relativeTime";
import { type RouterOutputs, api } from "~/utils/api";
import Image from "next/image";
import { LoadingPage, LoadingSpinner } from "../components/loading";
import dayjs from "dayjs";
import { toast } from "react-hot-toast";
import { useState } from "react";

dayjs.extend(RelativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();

  const [input, setInput] = useState("");

  if (!user) return null;

  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getAll.invalidate();
    },
    onError: (err) => {
      const zodErrorMessage = err.data?.zodError?.fieldErrors.content;
      if (zodErrorMessage?.[0]) {
        toast.error(zodErrorMessage[0]);
      } else {
        toast.error("Failed to create post");
      }
    },
  });

  return (
    <div className="flex flex-1 items-center gap-2">
      <Image
        className="mr-2 h-14 w-14 rounded-full"
        src={user.profileImageUrl}
        alt="profile"
        width={56}
        height={56}
      />
      <input
        placeholder="Type some emojis!"
        className="flex-grow bg-transparent outline-none"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        disabled={isPosting}
        onKeyDown={(e) => {
          if (e.key === "Enter" && !e.shiftKey && input !== "") {
            e.preventDefault();
            mutate({ content: input });
          }
        }}
      />
      {input !== "" && !isPosting && (
        <button
          className=""
          disabled={isPosting}
          onClick={() => mutate({ content: input })}
        >
          Post
        </button>
      )}
      {isPosting && <LoadingSpinner />}
    </div>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];
const PostView = ({ post, author }: PostWithUser) => {
  return (
    <div className="flex items-center gap-2 border-b border-slate-400 p-4">
      <Image
        width={56}
        height={56}
        alt={`@${author.username}`}
        className="h-14 w-14 rounded-full"
        src={author.profileImageUrl}
      />
      <div className="flex flex-1 flex-col">
        <div className="flex gap-1">
          <div className="text-slate-300">{`@${author.username}`}</div>
          <div className="text-slate-500"> Â· </div>
          <div className="text-slate-500">
            {dayjs(post.CreatedAt).fromNow()}
          </div>
        </div>
        <div className="flex">{post.content}</div>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;

  if (!data) return <div>No data</div>;

  return (
    <div className="flex flex-col">
      {data.map((postDetails) => (
        <PostView {...postDetails} key={postDetails.post.id} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const { isSignedIn, isLoaded } = useUser();

  // Start loading posts as soon as the user is loaded
  api.posts.getAll.useQuery();

  if (!isLoaded) {
    return <LoadingPage />;
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        {/* <SignIn path="/sign-in" routing="path" /> */}
        <div className="w-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex w-full border-b border-slate-400 p-4">
            {" "}
            {!isSignedIn && <SignInButton />}
            {isSignedIn && <CreatePostWizard />}
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
